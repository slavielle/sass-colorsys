/// Check if class name is in allowed class list
@function _scs_check_in_allowed_class_list(
  $color-name,
  $class-full-name,
  $class-part-name,
  $allowed-class-list
){
  @if map_get($allowed-class-list, $class-full-name) == null{
    @error "Undefined key: `#{$class-part-name}` for color `#{$color-name}` possible values `#{$allowed-class-list}`"
  }
  @return null;
}

/// Build a list of all allowed class name (wrapper mode)for the given color.
/// @param $color-name              Color name as mentioned in the color-set
/// @param $color-variant           Variant name as mentioned in the lighten / darken properties in the color-set
/// @param $color                   Color value
/// @param $css-properties-variants List of css properties to use for the color
/// @param $css-states-variants     List of css state to use for the color
/// @param $rule-types              List of rule types required for the color. Value must be normal or wrapped
/// @param $properties-repo         Properties repository with alias as key and real css property as value
/// @param $states-repo             State repository with alias as key and real css state as value
@function _scs_build_allowed_normal_class_list(
  $color-name,
  $color-variant,
  $color,
  $css-properties-variants,
  $css-states-variants,
  $rule-types,
  $properties-repo,
  $states-repo
) {

  $result: ();

  $color-full-name: $color-name;
  @if $color-variant != null {
    $color-full-name: #{$color-full-name}-#{$color-variant};
  }
  @each $css-property in $css-properties-variants {
    $key: nth($css-property, 1);
    $value-property: map-get($properties-repo, $key);
    @if $rule-types == null or index($rule-types, normal) != null {
      $result: map_merge($result, (color-#{$color-full-name}-#{$key}: true));
      @each $css-state in $css-states-variants {
        $key-state: nth($css-state, 1);
        $value-state: map-get($states-repo, $key-state);
        $result: map_merge($result, (color-#{$color-full-name}-#{$key}-#{$key-state}: true));
      }
    }
  }
  @return $result;
}

/// Build a list of all allowed class name (wrapper mode)for the given color.
/// @param $color-name              Color name as mentioned in the color-set
/// @param $color-variant           Variant name as mentioned in the lighten / darken properties in the color-set
/// @param $color                   Color value
/// @param $css-properties-variants List of css properties to use for the color
/// @param $css-states-variants     List of css state to use for the color
/// @param $rule-types              List of rule types required for the color. Value must be normal or wrapped
/// @param $properties-repo         Properties repository with alias as key and real css property as value
/// @param $states-repo             State repository with alias as key and real css state as value
@function _scs_build_allowed_wrapped_class_list(
  $color-name,
  $color-variant,
  $color,
  $css-properties-variants,
  $css-states-variants,
  $rule-types,
  $properties-repo,
  $state-repo
){
  $result: ();
  @each $css-property in $css-properties-variants {
    $key: nth($css-property, 1);
    $value-property: map-get($properties-repo, $key);
    @if $rule-types != null and index($rule-types, wrap) != null {
      $selector-base: null;
      @if $color-variant != null {
        $selector-base: #{$selector-base}#{$color-variant}-;
      }
      $selector-base: #{$selector-base}#{$key};
      $result: map_merge($result, (color-#{$selector-base}: true));
      @if ($css-states-variants) {
        @each $css_state in $css-states-variants {
          $key_state: nth($css_state, 1);
          $value-state: map-get($state-repo, $key-state);
          $selector-variant-base: #{$selector-base}-#{$key_state};
          $append: (color-#{$selector-variant-base}:true);
          $result: map_merge($append ,$result);
        }
      }
    }
  }
  @return $result;
}

/// Build wrapped style for color variant
/// @param $color-name              Color name as mentioned in the color-set
/// @param $color-variant           Variant name as mentioned in the lighten / darken properties in the color-set
/// @param $color                   Color value
/// @param $css-properties-variants List of css properties to use for the color
/// @param $css-states-variants     List of css state to use for the color
/// @param $rule-types              List of rule types required for the color. Value must be normal or wrapped
/// @param $properties-repo         Properties repository with alias as key and real css property as value
/// @param $states-repo             State repository with alias as key and real css state as value
/// @param $allowed-class-names
@mixin _scs_build_color_variants_wrapped_rules(
  $color-name,
  $color-variant,
  $color,
  $css-properties-variants,
  $css-states-variants,
  $rule-types,
  $properties-repo,
  $state-repo,
  $allowed-class-names
) {
  @each $css-property in $css-properties-variants {
    $key: nth($css-property, 1);
    $value-property: map-get($properties-repo, $key);
    @if $rule-types != null and index($rule-types, wrap) != null {
      &-wrapper-#{$color-name} {
        $selector-base: null;
        @if $color-variant != null {
          $selector-base: #{$selector-base}#{$color-variant}-;
        }
        $selector-base: #{$selector-base}#{$key};

        @if $allowed-class-names == null or index($allowed-class-names, $selector-base) != null{
          &.color-#{$selector-base}, & .color-#{$selector-base} {
            #{$value-property}: $color !important;
          }
        }
        @if ($css-states-variants) {
          @each $css_state in $css-states-variants {
            $key_state: nth($css_state, 1);
            $value-state: map-get($state-repo, $key-state);
            $selector-variant-base: #{$selector-base}-#{$key_state};
            @if $allowed-class-names == null or index($allowed-class-names, $selector-variant-base) != null {
              &.color-#{$selector-variant-base}:#{$value_state}, & .color-#{$selector-variant-base}:#{$value_state} {
                #{$value-property}: $color !important;
              }
            }
          }
        }
      }
    }
  }
}

/// Build style for color variant
/// @param $color-name              Color name as mentioned in the color-set
/// @param $color-variant           Variant name as mentioned in the lighten / darken properties in the color-set
/// @param $$color                  Color value
/// @param $css-properties-variants List of css properties to use for the color
/// @param $css-states-variants     List of css state to use for the color
/// @param $rule-types              List of rule types required for the color. Value must be normal or wrapped
/// @param $properties-repo         Properties repository with alias as key and real css property as value
/// @param $states-repo             State repository with alias as key and real css state as value
@mixin _scs_build_color_variants_normal_rules(
  $color-name,
  $color-variant,
  $color,
  $css-properties-variants,
  $css-states-variants,
  $rule-types,
  $properties-repo,
  $states-repo,
  $allowed-class-names
) {
  $color-full-name: $color-name;
  $color-variant-part: null;
  @if $color-variant != null {
    $color-full-name: #{$color-full-name}-#{$color-variant};
    $color-variant-part: #{$color-variant}-;
  }
  @each $css-property in $css-properties-variants {
    $key: nth($css-property, 1);
    $value-property: map-get($properties-repo, $key);
    @if $rule-types == null or index($rule-types, normal) != null {
      @if $allowed-class-names == null or index($allowed-class-names, #{$color-variant-part}#{$key}) != null {
        &-#{$color-full-name}-#{$key} {
          #{$value-property}: $color !important;
        }
      }
      @each $css-state in $css-states-variants {
        $key-state: nth($css-state, 1);
        $value-state: map-get($states-repo, $key-state);
        @if $allowed-class-names == null or index($allowed-class-names, #{$color-variant-part}#{$key}-#{$key-state}) != null {
          &-#{$color-full-name}-#{$key}-#{$key-state}:#{$value-state} {
            #{$value-property}: $color !important;
          }
        }
      }
    }
  }
}

/// Build style for color variants
/// @param $definitions Color definitions
/// @param $properties  Map defining color properties
/// @param $state       Map defining element states
@mixin _scs_build_color_and_variants(
  $definitions,
  $properties,
  $state
) {
  //$allowed-wrapped-class-list:();
  //$allowed-normal-class-list:();
  @each $definition in $definitions {

    // Init vars
    $color: map_get($definition, color);
    $color-name: map_get($definition, name);
    $rule-types: map_get($definition, rule-types);
    $wrap-allow: map_get($definition, wrap-allow);
    $normal-allow: map_get($definition, normal-allow);
    $variant-type-list: (lighten, darken);

    $css-properties-variants: map_get($definition, css_properties);
    @if $css-properties-variants == null{
      $css-properties-variants: map-keys($properties);
    }
    $css-states-variants: map_get($definition, css_states);
    @if $css-states-variants == null{
      $css-states-variants: map-keys($state);
    }

    // Build color style and wrapper styles
    @include _scs_build_color_variants_normal_rules($color-name, null, $color, $css-properties-variants, $css-states-variants, $rule-types, $properties, $state, $normal-allow);
    @include _scs_build_color_variants_wrapped_rules($color-name, null, $color, $css-properties-variants, $css-states-variants, $rule-types, $properties, $state, $wrap-allow);
    $wrappers-target-name: _scs_build_allowed_wrapped_class_list($color-name, null, $color, $css-properties-variants, $css-states-variants, $rule-types, $properties, $state);
    $normal-target-name: _scs_build_allowed_normal_class_list($color-name, null, $color, $css-properties-variants, $css-states-variants, $rule-types, $properties, $state);

    // Build color variant style and wrapper styles
    @each $variant-type in $variant-type-list {
      @if (map_get($definition, $variant-type)) {
        @each $variant in map_get($definition, $variant-type) {
          $key: nth($variant, 1);
          $value: nth($variant, 2);
          $computed-color: null;
          @if $variant-type == lighten {
            $computed-color: lighten($color, $value);
          }
          @else if $variant-type == darken {
            $computed-color: darken($color, $value);
          }
          @if $computed-color {
            @include _scs_build_color_variants_normal_rules($color-name, $key, $computed-color, $css-properties-variants, $css-states-variants, $rule-types, $properties, $state, $normal-allow);
            @include _scs_build_color_variants_wrapped_rules($color-name, $key, $computed-color, $css-properties-variants, $css-states-variants, $rule-types, $properties, $state, $wrap-allow);
            $wrappers-target-name: map_merge($wrappers-target-name, _scs_build_allowed_wrapped_class_list($color-name, $key, $computed-color, $css-properties-variants, $css-states-variants, $rule-types, $properties, $state));
            $normal-target-name: map_merge($normal-target-name, _scs_build_allowed_normal_class_list($color-name, $key, $computed-color, $css-properties-variants, $css-states-variants, $rule-types, $properties, $state));
          }
        }
      }
    }

    // Check wrap-allow property
    @if $wrap-allow {
      @each $wrap-allow-item in $wrap-allow {
        $result: _scs_check_in_allowed_class_list($color-name, color-#{$wrap-allow-item}, $wrap-allow-item, $wrappers-target-name);
      }
    }

    // Check wrap-allow property
    @if $normal-allow {
      @each $allow-item in $normal-allow {
        $result: _scs_check_in_allowed_class_list($color-name, color-#{$color-name}-#{$allow-item}, $allow-item, $normal-target-name);
      }
    }

  }
}

/// Build color rules.
/// @param $definitions Color definitions map
/// @param $settings    Settings
@mixin scs_build_colors(
  $definitions,
  $settings: ()
) {
  .color {

    // Default states and properties lists
    $properties: (cl: color, bg: background, bdc: border-color, fl: fill);
    $state: (ho: hover, ac: active, fo: focus);

    // Override states and properties lists
    $properties-override: map_get($settings, $properties) ;
    @if (type-of($properties-override) == 'map') {
      $properties: $properties-override;
    }
    $states-override: map_get($settings, states) ;
    @if (type-of($states-override) == 'map') {
      $state: $states-override;
    }

    // Build color variants
    @include _scs_build_color_and_variants($definitions, $properties, $state);
  }
}

/// Get color from color definitions map.
/// @param $definitions Color definitions
/// @param $name        Color name to look for inside the definitions
/// @param $variant     Color variant name to look for inside the definitions
@function scs_get_color(
  $param-1,
  $param-2: null,
  $param-3: null
) {

  $definitions: $color-set;
  $name: $param-1;
  $variant: $param-2;

  @if type-of($param-1) == 'map' {
    $definitions: $param-1;
    $name: $param-2;
    $variant: $param-3;
  }

  @each $definition in $definitions {
    @if $name == map-get($definition, name) {

      @if ($variant == null) {
        $color: map-get($definition, color);
        @if ($color) {
          @return map-get($definition, color);
        }
      } @else {
        $lighten_map: map-get($definition, lighten);
        $darken_map: map-get($definition, darken);
        @if ($lighten_map) {
          @each $lighten in $lighten_map {
            $key: nth($lighten, 1);
            $value: nth($lighten, 2);
            @if ($key == $variant) {
              @return lighten(map-get($definition, color), $value);
            }
          }
        }
        @if ($darken_map) {
          @each $darken in $darken_map {
            $key: nth($darken, 1);
            $value: nth($darken, 2);
            @if ($key == $variant) {
              @return darken(map-get($definition, color), $value);
            }
          }
        }
        @error "Undefined color: `#{$name}` variant: `#{$variant}`";
      }
    }
  }
  @error "Undefined color: `#{$name}`";
}